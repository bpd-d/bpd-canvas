{"version":3,"sources":["webpack://bpdCanvas/webpack/universalModuleDefinition","webpack://bpdCanvas/webpack/bootstrap","webpack://bpdCanvas/./src/core/functions.ts","webpack://bpdCanvas/./src/core/interfaces.ts","webpack://bpdCanvas/./src/impl/colors.ts","webpack://bpdCanvas/./src/core/mapper/setters.ts","webpack://bpdCanvas/./src/core/mapper/mapper.ts","webpack://bpdCanvas/./src/impl/statics.ts","webpack://bpdCanvas/./src/impl/components/base.ts","webpack://bpdCanvas/./src/impl/components/image.ts","webpack://bpdCanvas/./src/impl/components/path.ts","webpack://bpdCanvas/./src/impl/components/rectangle.ts","webpack://bpdCanvas/./src/impl/components/text.ts","webpack://bpdCanvas/./src/impl/assistant.ts","webpack://bpdCanvas/./src/impl/mapper.ts","webpack://bpdCanvas/./src/impl/paths.ts","webpack://bpdCanvas/./src/impl/properties.ts","webpack://bpdCanvas/./src/core/font.ts"],"names":["root","factory","exports","module","define","amd","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","notFalse","merge","t1","t2","mergeWithInherits","input","ts","length","reduce","res","idx","adjust","min","max","Math","round","adjustSmallRange","insert","collection","items","index","push","splice","ErrorBase","Error","message","super","setPrototypeOf","InitializationError","IteratorException","type","ElementException","id","SetterException","MapperExecption","StringColorBase","converter","init","_converter","_color","color","asString","Color","valueOrDefault","red","green","blue","alpha","val","str","startsWith","substring","len","callback","rgbParsersMap","parseHexToRgba","set","hue","saturation","lightness","context","options","_context","_colors","Map","_size","height","width","_startingPoint","x","y","setPosition","setSize","offset","delete","clear","point","size","gradient","createLinearGradient","forEach","addColorStop","definition","_definition","source","pattern","createPattern","repeat","defaultValue","fromHex","hex","parseInt","v","sixToRgba","substr","baseSet","destination","styleSetter","toStyle","numberSetter","parser","parseFloat","parsed","isNaN","enumSetter","expected","includes","map","_map","inner","excludes","excl","item","toString","vs","inst","is","mapTo","setter","e","angle360","PI","counters","createKey","counter","alternate","iterator","entry","next","done","setup","_global","settings","_settings","_useGlobalSettings","useGlobal","_mapper","mapper","_objectSetup","objectSetup","flag","isFill","isStroke","fill","stroke","excludedKeys","setStyles","position","drawImage","imageSlice","desitnationCoords","_isClosePath","_moveBeforeBuild","_paths","elements","paths","element","beginPath","startPoint","moveTo","child","build","closePath","drawOptions","fillRect","strokeRect","font","text","isValid","fillText","strokeText","_canvas","canvas","getContext","desynchronized","_useGlobalSettingsInComponents","useGlobalSettings","Array","isArray","setLineDash","setCanvasSize","startingPoint","getSetupForComponent","coordinates","globalAlpha","enabled","quality","imageSmoothingEnabled","imageSmoothingQuality","coords","getImageData","imageData","cutCoords","putImageData","createImageData","save","restore","co","clearRect","parseOptions","undefined","data","keys","keysCount","validator","objectName","objectType","throw","DataBase","_data","LineData","points","Line","from","last","lineTo","CurveData","end","corner","radius","Curve","validateKeys","arcTo","ArcData","startAngle","endAngle","Arc","arc","BezierCurveData","point1","point2","controlPoint","controlPoint2","BezierCurve","bezierCurveTo","QuadraticCurveData","QuadraticCurve","quadraticCurveTo","rotation","radiusX","radiusY","start","Ellipse","ellipse","properties","_instance","style","fillStyle","strokeStyle","shadowColor","offsetX","offsetY","blur","shadowOffsetX","shadowOffsetY","shadowBlur","textAlign","textBaseline","strokeWidth","lineJoin","lineCap","lineDash","dashOffset","mitterLimit","lineDashOffset","dash","_setup","unit","result","join"],"mappings":"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","file":"bpdCanvas.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"bpdCanvas\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"bpdCanvas\"] = factory();\n\telse\n\t\troot[\"bpdCanvas\"] = factory();\n})(this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","import { CanvasPoint } from \"./interfaces\";\r\n\r\n/**\r\n * Checks whether value passed is equal to false\r\n * @param value value to check\r\n * @returns false only when argument passed is equal to false, true otherwise\r\n */\r\nexport function notFalse(value?: boolean) {\r\n    return value === false ? false : true;\r\n}\r\n\r\n/**\r\n * Checks whether value passed is equal to true\r\n * @param value value to check\r\n * @returns true only when argument passed is equal to true, false otherwise\r\n */\r\nexport function isTrue(value?: boolean) {\r\n    return value === true ? true : false;\r\n}\r\n\r\nexport function merge<T>(t1: T, t2: T): T {\r\n    return {\r\n        ...t1,\r\n        ...t2\r\n    }\r\n}\r\n\r\nexport function mergeWithInherits<T extends V, V>(input: T, ...ts: V[]): V {\r\n    if (ts.length === 1) {\r\n        return {\r\n            ...input,\r\n            ...ts[0]\r\n        };\r\n    }\r\n    return ts.reduce((res, t) => {\r\n        if (!t) {\r\n            return res;\r\n        }\r\n        return {\r\n            ...res,\r\n            ...t\r\n        }\r\n    }, { ...input });\r\n}\r\n\r\n\r\n// function isIterator<T>(obj: Iterable<T>) {\r\n//     return typeof obj[Symbol.iterator] === 'function';\r\n// }\r\n\r\n// function getIterator<T>(obj: Iterable<T>): Iterator<T> | null {\r\n//     return isIterator(obj) ? obj[Symbol.iterator]() : null;\r\n// }\r\n\r\n\r\n// function enumerate<T>(iterator: Iterator<T>, callback: (value: T, index: number) => void): void {\r\n//     let index = 0;\r\n//     let current = iterator.next();\r\n//     while (!current.done) {\r\n//         callback(current.value, index);\r\n//         index++;\r\n//         current = iterator.next();\r\n//     }\r\n// }\r\n\r\n// /**\r\n//  * Finds all indexes of items that passes condition\r\n//  * @param iterable object to find in\r\n//  * @param callback function that provides condition\r\n//  * @returns list of indexes found\r\n//  */\r\n// export function findAllIndexes<T>(iterable: Iterable<T>, callback: (value: T, index: number) => boolean): number[] {\r\n//     const result: number[] = [];\r\n//     const iterator = getIterator(iterable);\r\n//     if (!iterator) {\r\n//         return result;\r\n//     }\r\n//     enumerate(iterator, (value: T, index: number) => {\r\n//         if (callback(value, index)) {\r\n//             result.push(index)\r\n//         }\r\n//     })\r\n//     return result;\r\n// }\r\n\r\n\r\n/**\r\n * Returns an iterator that incerments value on each call\r\n * It goes from 1...200000 and resets\r\n */\r\nexport function* counter(): Iterator<number> {\r\n    let idx = 1;\r\n    while (true) {\r\n        let reset = yield idx++;\r\n        if (reset || idx > 200000) {\r\n            idx = 1;\r\n        }\r\n    }\r\n}\r\n\r\nexport function validator<T>(input: T | undefined, keys: (keyof T)[], callback: (objectName: string, objectType: string, value: any) => boolean): boolean {\r\n    if (!input) {\r\n        return false;\r\n    }\r\n    const keysCount = keys.length;\r\n    if (keysCount === 0) {\r\n        return true\r\n    }\r\n    let key: keyof T = keys[0];\r\n    for (let i = 0; i < keysCount; i++, key = keys[i]) {\r\n        const val = input[key] as any;\r\n        if (!callback(key.toString(), typeof input[key], val)) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n/**\r\n * Converts point it string representation\r\n * @param point \r\n * @returns String representation of point in format of x: 0, y: 0 \r\n */\r\nexport function pointToString(point: CanvasPoint): string {\r\n    if (!point) {\r\n        return \"-\";\r\n    }\r\n    return `x:${point.x}, y:${point.y}`;\r\n}\r\n\r\n\r\n/**\r\n * Adjusts value to specified range\r\n * @param value value to be checked\r\n * @param min range minimum\r\n * @param max range maximum\r\n * @returns Value that is within the range\r\n */\r\nexport function adjust(value: number, min: number, max: number) {\r\n    return Math.round(Math.max(Math.min(max, value), 0));\r\n}\r\n\r\n/**\r\n * Adjusts range to 0..1.\r\n * If value is smaller than 1 then value stays\r\n * If value is bigger than 1 is treated as percentage and divided by 100\r\n * Value smaller than 0 is defaulted to 0\r\n * @param value \r\n * @returns value adjusted to 0..1 range\r\n */\r\nexport function adjustSmallRange(value: number): number {\r\n    value = Math.max(value, 0);\r\n    return value > 1 ? Math.min(value, 100) / 100 : value;\r\n}\r\n\r\n\r\n/**\r\n * Gets value of key from first or second object regarding which object this key exists on.\r\n * If both have key existing, first one is returned\r\n * @param key object property name\r\n * @param v1 first object\r\n * @param v2 second object\r\n * @returns found value or undefined\r\n */\r\nexport function getVal<V>(key: keyof V, v1: V, v2: V): V[keyof V] | undefined {\r\n    return v1[key] ?? v2[key];\r\n}\r\n\r\n/**\r\n * Inserts items at specific position in the collection.\r\n * When position is not provided or does not fit to collection range then items are appended to collection\r\n * @param collection collection\r\n * @param items items to be added\r\n * @param index? positions\r\n *  \r\n * @example insert([1,2,3], [5], 1)\r\n */\r\nexport function insert<T>(collection: T[], items: T[], index?: number) {\r\n    if (typeof index !== 'number' || index < 0 || index >= collection.length) {\r\n        collection.push(...items);\r\n        return;\r\n    }\r\n    collection.splice(index, 0, ...items)\r\n}","import { IMapper } from \"./mapper/interfaces\";\r\nimport { Mapper } from \"./mapper/mapper\";\r\n\r\nexport interface IStringable {\r\n    asString(): string;\r\n}\r\n\r\nexport interface ISetter<T> {\r\n    set(t: T): ISetter<T>\r\n}\r\n\r\nexport interface IGetter<T> {\r\n    get(): T;\r\n}\r\n\r\n\r\nexport interface AssistantOptions {\r\n    canvas: HTMLCanvasElement;\r\n    size?: CanvasObjectSize;\r\n    settings?: IObjectProperties;\r\n    alpha?: boolean;\r\n    desynchronized?: boolean;\r\n    useGlobalSettings?: boolean;\r\n}\r\n\r\nexport type TextAlign = \"left\" | \"right\" | \"center\" | \"start\" | \"end\";\r\nexport type TextBaseline = \"top\" | \"hanging\" | \"middle\" | \"alphabetic\" | \"ideographic\" | \"bottom\";\r\nexport type LineCap = \"butt\" | \"round\" | \"square\";\r\nexport type LineJoin = \"bevel\" | \"round\" | \"miter\";\r\n\r\nexport type PatternRepetition = \"repeat\" | 'repeat-x' | 'repeat-y' | 'no-repeat';\r\n\r\nexport interface IObjectProperties {\r\n    strokeStyle?: IObjectStyle;\r\n    fillStyle?: IObjectStyle;\r\n    strokeWidth?: number;\r\n    isFill?: boolean;\r\n    isStroke?: boolean;\r\n    font?: IStringable;\r\n    mitterLimit?: number;\r\n    lineCap?: LineCap;\r\n    lineJoin?: LineJoin;\r\n    lineDashOffset?: number;\r\n    lineDash?: number[];\r\n    textAlign?: TextAlign;\r\n    textBaseline?: TextBaseline;\r\n    shadowColor?: IObjectStyle;\r\n    shadowOffsetX?: number;\r\n    shadowOffsetY?: number;\r\n    shadowBlur?: number;\r\n}\r\n\r\nexport interface CanvasObjectSetup<T, V> {\r\n    context: T,\r\n    settings: V,\r\n    mapper: IMapper<V, T>;\r\n    //objectSetup?: K;\r\n    useGlobal: boolean;\r\n    key?: string;\r\n}\r\n\r\nexport interface IObjectStyle {\r\n    toStyle(): string | CanvasGradient | CanvasPattern;\r\n}\r\n\r\nexport interface RgbColorDefinition {\r\n    red?: number;\r\n    green?: number;\r\n    blue?: number;\r\n    alpha?: number;\r\n}\r\n\r\nexport interface HslColorDefinition {\r\n    hue?: number;\r\n    saturation?: number;\r\n    lightness?: number;\r\n    alpha?: number;\r\n}\r\n\r\nexport interface CanvasPatternDefinition {\r\n    source?: CanvasImageSource;\r\n    repeat?: PatternRepetition;\r\n}\r\n\r\nexport interface CanvasObjectSize {\r\n    width: number;\r\n    height: number;\r\n}\r\n\r\nexport interface CanvasPoint {\r\n    x: number;\r\n    y: number;\r\n}\r\n\r\nexport interface IIdentifyable {\r\n    id: string;\r\n}\r\n\r\nexport interface IKey<T> {\r\n    getKey(): T;\r\n}\r\n\r\nexport interface PathElementOptions<T> {\r\n    key?: string;\r\n    init?: T;\r\n}\r\n\r\nexport interface TextSetup {\r\n    text?: string;\r\n    position?: CanvasPoint;\r\n}\r\n\r\nexport interface CanvasImageSetup {\r\n    source?: CanvasImageSource;\r\n    position?: CanvasPoint;\r\n    imageSlice?: CanvasObjectCoordinates;\r\n    desitnationCoords?: CanvasObjectCoordinates;\r\n}\r\n\r\nexport interface CanvasObjectCoordinates extends CanvasObjectSize, CanvasPoint { };\r\n\r\nexport interface ArcOptions {\r\n    startAngle: number;\r\n    endAngle: number;\r\n    radius: number;\r\n}\r\n\r\nexport interface CurveOptions {\r\n    radius?: number;\r\n    corner?: CanvasPoint;\r\n    end?: CanvasPoint;\r\n}\r\n\r\nexport interface BezierCurveOptions {\r\n    controlPoint?: CanvasPoint;\r\n    controlPoint2?: CanvasPoint;\r\n    end?: CanvasPoint;\r\n}\r\n\r\nexport interface QuadraticCurveOptions {\r\n    controlPoint?: CanvasPoint;\r\n    end?: CanvasPoint;\r\n}\r\n\r\nexport interface EllipseOptions {\r\n    rotation?: number;\r\n    radiusX?: number;\r\n    radiusY?: number;\r\n    startAngle?: number;\r\n    endAngle?: number;\r\n}\r\n\r\nexport interface ICanvasDrawable extends IIdentifyable {\r\n    draw(): void;\r\n    getRect(): CanvasObjectCoordinates;\r\n}\r\n\r\nexport interface IFillable {\r\n    fill(flag?: boolean): void;\r\n}\r\n\r\nexport interface IStrokable {\r\n    stroke(flag?: boolean): void;\r\n}\r\n\r\nexport interface ICollectionOperator<T, V> {\r\n    first(collection: T[], t: V): T | null;\r\n    delete(collection: T[], t: V): void;\r\n    set(collection: T[], t: V, element: T): void;\r\n}\r\n\r\nexport interface IPathElement extends IIdentifyable, IKey<string> {\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint;\r\n}\r\n\r\nexport class ErrorBase extends Error {\r\n    constructor(name: string, message?: string) {\r\n        super(message);\r\n        Object.setPrototypeOf(this, new.target.prototype);\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class InitializationError extends ErrorBase {\r\n    constructor(message?: string) {\r\n        super(\"InitializationError\", message)\r\n    }\r\n}\r\n\r\nexport class MissingKeyException extends ErrorBase {\r\n    constructor(type: string, message?: string) {\r\n        super(\"MissingKeyException\", `[${type}] ${message ?? \"\"}`)\r\n    }\r\n}\r\n\r\nexport class IteratorException extends ErrorBase {\r\n    constructor(type: string, message?: string) {\r\n        super(\"IteratorException\", `[${type}] ${message ?? \"\"}`)\r\n    }\r\n}\r\n\r\nexport class ElementException extends ErrorBase {\r\n    constructor(type: string, id: string, message?: string) {\r\n        super(\"ElementException\", `[${type}][${id}] ${message ?? \"\"}`)\r\n    }\r\n}\r\n\r\nexport class SetterException extends ErrorBase {\r\n    constructor(type: string, message?: string) {\r\n        super(\"SetterException\", `[${type}] ${message ?? \"\"}`)\r\n    }\r\n}\r\n\r\nexport class EnumSetterException extends SetterException {\r\n    constructor(message?: string) {\r\n        super(\"Enum\", `${message ?? \"\"}`)\r\n    }\r\n}\r\n\r\nexport class MapperExecption extends ErrorBase {\r\n    constructor(key: string, message: string) {\r\n        super(\"MapperExecption\", `Error occured on [${key}]: ${message}`)\r\n    }\r\n}\r\n\r\nexport class CounterError extends ErrorBase {\r\n    constructor(name: string, message: string) {\r\n        super(\"CounterError\", `Counter [${name}]: ${message}`)\r\n    }\r\n}","import { adjust, adjustSmallRange, merge } from \"../core/functions\";\r\nimport { CanvasPoint, IStringable, CanvasObjectCoordinates, CanvasObjectSize, HslColorDefinition, IObjectStyle, RgbColorDefinition, CanvasPatternDefinition, ErrorBase, ISetter } from \"../core/interfaces\";\r\n\r\nexport interface ColorConverter<T> {\r\n    (t: T): string;\r\n}\r\n\r\nexport class StringColorBase<T> implements IStringable, IObjectStyle {\r\n    protected _color: T;\r\n    private _converter: ColorConverter<T>;\r\n    constructor(converter: ColorConverter<T>, init: T) {\r\n        this._converter = converter;\r\n        this._color = init;\r\n\r\n    }\r\n\r\n    set(color: T): void {\r\n        this._color = {\r\n            ...this._color,\r\n            ...color\r\n        }\r\n    }\r\n\r\n    get(): T {\r\n        return this._color;\r\n    }\r\n\r\n    asString(): string {\r\n        return this._converter(this._color);\r\n    }\r\n\r\n    toStyle(): string | CanvasGradient {\r\n        return this.asString();\r\n    }\r\n}\r\n\r\n/**\r\n * Creates instance of object style that accepts all kind of colors in string format\r\n */\r\nexport class Color extends StringColorBase<string> {\r\n    constructor(name: string) {\r\n        super((name: string) => {\r\n            return name;\r\n        }, name);\r\n    }\r\n\r\n    set(color: string) {\r\n        this._color = color;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates instance of style object building a RGB color\r\n */\r\nexport class RgbColor extends StringColorBase<RgbColorDefinition> {\r\n    constructor(color: RgbColorDefinition) {\r\n        super((color: RgbColorDefinition) => {\r\n            const c: RgbColorDefinition = {\r\n                red: adjust(valueOrDefault(color.red, 0), 0, 255),\r\n                green: adjust(valueOrDefault(color.green, 0), 0, 255),\r\n                blue: adjust(valueOrDefault(color.blue, 0), 0, 255),\r\n                alpha: adjustSmallRange(valueOrDefault(color.alpha, 1))\r\n            };\r\n            return `rgba(${c.red},${c.green},${c.blue},${c.alpha})`;\r\n        }, color);\r\n    }\r\n\r\n    setRed(value: number): void {\r\n        this._color.red = value;\r\n    }\r\n\r\n    setGreen(value: number): void {\r\n        this._color.green = value;\r\n    }\r\n\r\n    setBlue(value: number): void {\r\n        this._color.blue = value;\r\n    }\r\n\r\n    setAlpha(value: number) {\r\n        this._color.alpha = value;\r\n    }\r\n\r\n    fromHex(color: string) {\r\n        const val = parseHexToRgba(color);\r\n        if (val) {\r\n            this.set(val)\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Creates instance of style object building a HSL color\r\n */\r\nexport class HslColor extends StringColorBase<HslColorDefinition> {\r\n    constructor(color: HslColorDefinition) {\r\n        super((color: HslColorDefinition) => {\r\n            const c: HslColorDefinition = {\r\n                hue: adjust(valueOrDefault(color.hue, 0), 0, 360),\r\n                saturation: adjust(valueOrDefault(color.saturation, 0), 0, 100),\r\n                lightness: adjust(valueOrDefault(color.lightness, 0), 0, 100),\r\n                alpha: adjustSmallRange(valueOrDefault(color.alpha, 1))\r\n            };\r\n            return `hsla(${c.hue},${c.saturation}%,${c.lightness}%,${c.alpha})`;\r\n        },\r\n            color);\r\n    }\r\n\r\n    setHue(value: number): void {\r\n        this._color.hue = value;\r\n    }\r\n\r\n    setSaturation(value: number): void {\r\n        this._color.saturation = value;\r\n    }\r\n\r\n    setLightness(value: number): void {\r\n        this._color.lightness = value;\r\n    }\r\n\r\n    setAlpha(value: number) {\r\n        this._color.alpha = value;\r\n    }\r\n}\r\n\r\n/**\r\n * Creates instance of object styles that allows to build linear gradient\r\n */\r\nexport class CanvasLinearGradientColor implements IObjectStyle {\r\n    private _colors: Map<number, IStringable>;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _startingPoint: CanvasPoint;\r\n    private _size: CanvasObjectSize;\r\n\r\n    constructor(context: CanvasRenderingContext2D, options?: CanvasObjectCoordinates) {\r\n        this._context = context;\r\n        this._colors = new Map();\r\n        this._size = {\r\n            height: 0,\r\n            width: 0\r\n        };\r\n        this._startingPoint = {\r\n            x: 0,\r\n            y: 0\r\n        }\r\n\r\n        if (options) {\r\n            this.setPosition(options);\r\n            this.setSize(options)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds color to map with specific offset\r\n     * @param offset \r\n     * @param color \r\n     */\r\n    addColor(offset: number, color: IStringable) {\r\n        this._colors.set(offset, color);\r\n    }\r\n\r\n    /**\r\n     * Removes color from map with specific offset\r\n     * @param offset color offset\r\n     * @returns whether operation succeeded\r\n     */\r\n    removeColor(offset: number): boolean {\r\n        return this._colors.delete(offset);\r\n    }\r\n\r\n    /**\r\n     * Clears color map\r\n     */\r\n    clearColors() {\r\n        this._colors.clear();\r\n    }\r\n\r\n    /**\r\n     * Sets gradient position\r\n     * @param point \r\n     */\r\n    setPosition(point: CanvasPoint) {\r\n        const { x, y } = point;\r\n        this._startingPoint = {\r\n            x, y\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets gradient size\r\n     * @param size \r\n     */\r\n    setSize(size: CanvasObjectSize) {\r\n        const { width, height } = size;\r\n        this._size = {\r\n            width,\r\n            height\r\n\r\n        }\r\n    }\r\n\r\n    toStyle(): string | CanvasGradient {\r\n        const gradient = this._context.createLinearGradient(this._startingPoint.x, this._startingPoint.y, this._size.width, this._size.height);\r\n        this._colors.forEach((value: IStringable, key: number) => {\r\n            const offset = adjustSmallRange(key);\r\n            gradient.addColorStop(offset, value.asString());\r\n        })\r\n        return gradient;\r\n    }\r\n}\r\n\r\nexport class CanvasSourcePattern implements IObjectStyle, ISetter<CanvasPatternDefinition> {\r\n    private _context: CanvasRenderingContext2D;\r\n    private _definition: CanvasPatternDefinition;\r\n    constructor(context: CanvasRenderingContext2D, definition?: CanvasPatternDefinition) {\r\n        this._context = context;\r\n        this._definition = definition ?? {};\r\n    }\r\n\r\n    set(t: CanvasPatternDefinition): ISetter<CanvasPatternDefinition> {\r\n        merge(this._definition, t);\r\n        return this;\r\n    }\r\n\r\n\r\n    toStyle(): string | CanvasGradient | CanvasPattern {\r\n        if (!this._definition || !this._definition.source) {\r\n            throw new ErrorBase(\"CanvasImagePatternError\", \"Cannot create pattern, source is missing\")\r\n        }\r\n        const pattern = this._context.createPattern(this._definition.source, this._definition.repeat ?? \"\");\r\n        if (!pattern) {\r\n            throw new ErrorBase(\"CanvasImagePatternError\", \"Pattern was not created\")\r\n        }\r\n        return pattern;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\nfunction valueOrDefault<T>(value: T | undefined, defaultValue: T): T {\r\n    return value ?? defaultValue;\r\n}\r\n\r\nfunction fromHex(hex: string): number {\r\n    return parseInt(hex, 16);\r\n}\r\n\r\nfunction parseHexToRgba(value: string): RgbColorDefinition | null {\r\n    const str = value.startsWith('#') ? value.substring(1) : value;\r\n    const len = str.length;\r\n    const callback = rgbParsersMap.get(len);\r\n    return callback ? callback(str) : null;\r\n\r\n\r\n}\r\n\r\nconst rgbParsersMap = new Map<number, (v: string) => RgbColorDefinition>([\r\n    [1, oneHexToRgba],\r\n    [3, threeHexToRgba],\r\n    [6, sixToRgba],\r\n    [8, eightToRgba]\r\n])\r\n\r\n/**\r\n * Helper function that parses single character string to RGB color space\r\n * @param value single character string\r\n */\r\nfunction oneHexToRgba(value: string): RgbColorDefinition {\r\n    const v = fromHex(value + value);\r\n    return {\r\n        red: v,\r\n        green: v,\r\n        blue: v,\r\n        alpha: 1\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function that parses three character string to RGB color space\r\n * @param value three character string\r\n */\r\nfunction threeHexToRgba(value: string): RgbColorDefinition {\r\n    return {\r\n        red: fromHex(value[0]),\r\n        green: fromHex(value[1]),\r\n        blue: fromHex(value[2]),\r\n        alpha: 1\r\n    }\r\n}\r\n\r\n/**\r\n * Helper function that parses six character string to RGB color space\r\n * @param value six character string\r\n */\r\nfunction sixToRgba(value: string): RgbColorDefinition {\r\n    return {\r\n        red: fromHex(value.substr(0, 2)),\r\n        green: fromHex(value.substr(2, 2)),\r\n        blue: fromHex(value.substr(4, 2)),\r\n        alpha: 1\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Helper function that parses eight character string to RGB color space\r\n * @param value eight character string\r\n */\r\nfunction eightToRgba(value: string): RgbColorDefinition {\r\n    return {\r\n        ...sixToRgba(value),\r\n        alpha: fromHex(value.substr(6, 2))\r\n    }\r\n}","import { IObjectStyle, IStringable, SetterException } from \"../interfaces\";\r\nimport { MapSetter } from \"./interfaces\";\r\n\r\nconst boolStringOptions: string[] = ['y', 't', 'true', 'yes'];\r\n\r\nexport function baseSet<V>(destination: V, key: keyof V, value: any) {\r\n    if (typeof destination[key] !== 'function' && typeof value !== 'function') {\r\n        destination[key] = value;\r\n    }\r\n}\r\n\r\nexport function styleSetter<T>(): MapSetter<T> {\r\n    return {\r\n        set: <T>(destination: T, key: keyof T, value: any) => {\r\n            baseSet(destination, key, (<IObjectStyle>value).toStyle());\r\n        }\r\n    }\r\n}\r\n\r\nexport function boolSetter<T>(): MapSetter<T> {\r\n    return {\r\n        set: <T>(destination: T, key: keyof T, value: any) => {\r\n            let resVal = false;\r\n            switch (typeof value) {\r\n                case 'boolean':\r\n                    resVal = value;\r\n                    break;\r\n                case 'number':\r\n                    resVal = value > 0;\r\n                    break;\r\n                case 'string':\r\n                    resVal = boolStringOptions.includes(value.toLowerCase());\r\n                    break;\r\n            }\r\n            baseSet(destination, key, resVal);\r\n        }\r\n    }\r\n}\r\n\r\nexport function numberSetter<T>(parser: 'float' | 'integer', defaultValue?: number): MapSetter<T> {\r\n    const callback = parser === 'float' ? parseFloat : parseInt;\r\n    return {\r\n        set: <T>(destination: T, key: keyof T, value: any) => {\r\n            const parsed = callback(value);\r\n            if (isNaN(parsed)) {\r\n                if (!defaultValue) {\r\n                    throw new SetterException(parser, \"Value is not a number\")\r\n                }\r\n                baseSet(destination, key, defaultValue)\r\n                return\r\n            }\r\n            baseSet(destination, key, parsed)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function stringableSetter<T>(): MapSetter<T> {\r\n    return {\r\n        set: <T>(destination: T, key: keyof T, value: any) => {\r\n\r\n            if (typeof value === 'string') {\r\n                baseSet(destination, key, value);\r\n                return;\r\n            }\r\n            baseSet(destination, key, (<IStringable>value).asString());\r\n        }\r\n    }\r\n}\r\n\r\nexport function enumSetter<T, V>(expected: T[], defaultValue?: T): MapSetter<V> {\r\n    return {\r\n        set: <V>(destination: V, key: keyof V, value: any) => {\r\n            if (expected.includes(value)) {\r\n                baseSet(destination, key, value)\r\n                return;\r\n            }\r\n            if (defaultValue) {\r\n                baseSet(destination, key, defaultValue)\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { MapperExecption } from \"../interfaces\";\r\nimport { IMapper, MapItem } from \"./interfaces\";\r\nimport { baseSet } from \"./setters\";\r\n\r\nexport class Mapper<T, V> implements IMapper<T, V> {\r\n    private _map: MapItem<T, V>[];\r\n    constructor(map: MapItem<T, V>[]) {\r\n        this._map = map;\r\n    }\r\n\r\n    map(destination: V, inner: T[], excludes?: string[]) {\r\n        const excl = excludes ?? [];\r\n        this._map.forEach(item => {\r\n            const key = item.key.toString();\r\n            if (excl.includes(key)) {\r\n                return;\r\n            }\r\n            const val = getVal(item.key, ...inner)\r\n            if (val) {\r\n                // In case where key is the same in both objects - set only key\r\n                const key: keyof V = item.mapTo ?? <any>item.key;\r\n                if (item.setter) {\r\n                    item.setter.set(destination, key, val)\r\n                    return;\r\n                }\r\n                try {\r\n                    baseSet(destination, key, val);\r\n                } catch (e) {\r\n                    throw new MapperExecption(key + \"\", e.message);\r\n                }\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction getVal<V>(key: keyof V, ...vs: V[]): V[keyof V] | undefined {\r\n    const len = vs.length\r\n    if (len === 0) {\r\n        return undefined;\r\n    }\r\n    for (let i = 0; i < len; i++) {\r\n        const inst = vs[i][key];\r\n        if (is(inst)) {\r\n            return inst;\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n\r\nfunction is(val: any): boolean {\r\n    return typeof val !== 'undefined' && val !== null;\r\n}\r\n","import { counter } from \"../core/functions\";\r\nimport { IteratorException } from \"../core/interfaces\";\r\n\r\nexport const angle360: number = Math.PI * 2;\r\n\r\nconst counters: Map<string, Iterator<number>> = new Map([\r\n    ['line', counter()],\r\n    ['rect', counter()],\r\n    ['path', counter()],\r\n    ['curve', counter()],\r\n    ['text', counter()],\r\n    ['ellipse', counter()],\r\n    ['image', counter()],\r\n]);\r\n\r\nexport function createKey(counter: string, alternate?: string): string {\r\n    const iterator = counters.get(counter);\r\n    if (!iterator) {\r\n        throw new IteratorException(counter, \"Iterator for counter has not been found\");\r\n    }\r\n    const entry = iterator.next();\r\n    if (entry.done) {\r\n        throw new IteratorException(counter, \"Iterator is done\");\r\n    }\r\n    return `${alternate ?? counter}_${entry.value}`\r\n}\r\n\r\n\r\n","import { merge, notFalse } from \"../../core/functions\";\r\nimport { IFillable, IStrokable, IIdentifyable, IKey, IObjectProperties, CanvasObjectSetup } from \"../../core/interfaces\";\r\nimport { IMapper } from \"../../core/mapper/interfaces\";\r\nimport { createKey } from \"../statics\";\r\n\r\nclass ElementBase {\r\n    _context: CanvasRenderingContext2D\r\n    constructor(context: CanvasRenderingContext2D) {\r\n        this._context = context;\r\n    }\r\n}\r\n\r\n\r\nexport class CanvasObjectBase<T> extends ElementBase implements IFillable, IStrokable, IIdentifyable, IKey<string> {\r\n    protected _settings: IObjectProperties;\r\n    protected _global: IObjectProperties;\r\n    protected _mapper: IMapper<IObjectProperties, CanvasRenderingContext2D>;\r\n    protected _objectSetup: T;\r\n    private _useGlobalSettings: boolean;\r\n    id: string;\r\n    constructor(setup: CanvasObjectSetup<CanvasRenderingContext2D, IObjectProperties>, init: T, counter: string) {\r\n        super(setup.context);\r\n        this._global = setup.settings;\r\n        this._settings = {\r\n            ...this._global\r\n        }\r\n        this._useGlobalSettings = setup.useGlobal;\r\n        this._mapper = setup.mapper;\r\n        this._objectSetup = init;\r\n        this.id = setup.key ?? createKey(counter);\r\n    }\r\n\r\n    set(objectSetup: T) {\r\n        if (!this._objectSetup) {\r\n            this._objectSetup = {\r\n                ...objectSetup\r\n            }\r\n            return this;\r\n        }\r\n        merge(this._objectSetup, objectSetup);\r\n        return this;\r\n    }\r\n\r\n    fill(flag?: boolean) {\r\n        this._settings.isFill = notFalse(flag);\r\n        return this;\r\n    }\r\n\r\n    stroke(flag?: boolean) {\r\n        this._settings.isStroke = notFalse(flag);\r\n        return this;\r\n    }\r\n\r\n    setSettings(settings: IObjectProperties) {\r\n        this._settings = merge(this._settings, settings);\r\n        return this;\r\n    }\r\n\r\n    getKey(): string {\r\n        return this.id;\r\n    }\r\n\r\n    protected drawOptions() {\r\n        if (this._settings.isFill) {\r\n            this._context.fill();\r\n        }\r\n\r\n        if (this._settings.isStroke) {\r\n            this._context.stroke();\r\n        }\r\n    }\r\n\r\n    protected setStyles(excludedKeys?: string[]) {\r\n        const settings = [this._settings];\r\n        if (this._useGlobalSettings) {\r\n            settings.push(this._global)\r\n        }\r\n        this._mapper.map(this._context, settings, excludedKeys)\r\n    }\r\n}","import { CanvasImageSetup, CanvasObjectCoordinates, CanvasObjectSetup, ICanvasDrawable, IObjectProperties } from \"../../core/interfaces\";\r\nimport { CanvasObjectBase } from \"./base\";\r\n\r\n/**\r\n * Creates instance of Image drawable that draws an image on the canvas\r\n */\r\nexport class CanvasImage extends CanvasObjectBase<CanvasImageSetup> implements ICanvasDrawable {\r\n    constructor(setup: CanvasObjectSetup<CanvasRenderingContext2D, IObjectProperties>, init?: CanvasImageSetup) {\r\n        super(setup, init ?? {}, 'image');\r\n        if (!this._objectSetup) {\r\n            this._objectSetup = {};\r\n        }\r\n    }\r\n\r\n    draw() {\r\n\r\n        if (!this._objectSetup.source) {\r\n            return;\r\n        }\r\n        this.setStyles();\r\n        // Draw whole image\r\n        if (this._objectSetup.position) {\r\n            this._context.drawImage(this._objectSetup.source, this._objectSetup.position.x, this._objectSetup.position.y);\r\n            return;\r\n        }\r\n        // Draw a slice or a scaled image\r\n        if (this._objectSetup.imageSlice && this._objectSetup.desitnationCoords) {\r\n            this._context.drawImage(this._objectSetup.source,\r\n                this._objectSetup.imageSlice.x, this._objectSetup.imageSlice.y, this._objectSetup.imageSlice.width, this._objectSetup.imageSlice.height,\r\n                this._objectSetup.desitnationCoords.x, this._objectSetup.desitnationCoords.y, this._objectSetup.desitnationCoords.width, this._objectSetup.desitnationCoords.height,\r\n            )\r\n        }\r\n    }\r\n\r\n    getRect(): CanvasObjectCoordinates {\r\n        const w = <number>this._objectSetup.source?.width ?? 0;\r\n        const h = <number>this._objectSetup.source?.height ?? 0;\r\n        return {\r\n            x: 0,\r\n            y: 0,\r\n            width: w,\r\n            height: h\r\n        }\r\n    }\r\n}","import { insert, notFalse } from \"../../core/functions\";\r\nimport { CanvasPoint, ICanvasDrawable, IPathElement, CanvasObjectSetup, IObjectProperties, ElementException, ICollectionOperator, CanvasObjectCoordinates } from \"../../core/interfaces\";\r\nimport { CanvasObjectBase } from \"./base\";\r\n\r\n/** \r\n * Draws path on canvas. Path always consists of path elements\r\n */\r\nexport class CanvasPath extends CanvasObjectBase<CanvasPoint> implements ICanvasDrawable {\r\n    public _isClosePath: boolean;\r\n    public _moveBeforeBuild: boolean;\r\n    private _paths: IPathElement[];\r\n    constructor(setup: CanvasObjectSetup<CanvasRenderingContext2D, IObjectProperties>, init?: CanvasPoint) {\r\n        super(setup, init ?? { x: -1, y: -1 }, 'path');\r\n        // for path set stroke to true by default regardless of globals\r\n        this._settings.isStroke = true;\r\n        this._isClosePath = false;\r\n        this._moveBeforeBuild = true;\r\n        this._paths = [];\r\n    }\r\n\r\n    from(point: CanvasPoint) {\r\n        this._objectSetup = {\r\n            ...point\r\n        }\r\n        return this;\r\n    }\r\n\r\n    add(...elements: IPathElement[]) {\r\n        insert(this._paths, elements);\r\n        return this;\r\n    }\r\n\r\n    doNotMoveBeforeBuild() {\r\n        this._moveBeforeBuild = false;\r\n        return this;\r\n    }\r\n\r\n    get(index: number): IPathElement | null {\r\n        if (index > -1 && index < this._paths.length) {\r\n            return this._paths[index];\r\n        }\r\n        return null;\r\n    }\r\n\r\n    delete(key: number) {\r\n        if (!key) {\r\n            return;\r\n        }\r\n        this._paths.splice(key, 1);\r\n    }\r\n\r\n    insertAt(index: number, ...paths: IPathElement[]) {\r\n        insert(this._paths, paths, index);\r\n        return this;\r\n    }\r\n\r\n    setAt(index: number, element: IPathElement) {\r\n        if (index >= 0 && index < this._paths.length) {\r\n            this._paths[index] = element;\r\n        }\r\n        return this;\r\n    }\r\n\r\n    close(flag?: boolean) {\r\n        this._isClosePath = notFalse(flag);\r\n    }\r\n\r\n    draw(): void {\r\n        if (!this._objectSetup) {\r\n            return;\r\n        }\r\n        this._context.beginPath();\r\n        this.setStyles();\r\n        let startPoint = this._objectSetup;\r\n        try {\r\n            if (this._moveBeforeBuild)\r\n                this._context.moveTo(startPoint.x, startPoint.y)\r\n            this._paths.forEach(child => {\r\n                startPoint = child.build(this._context, startPoint);\r\n            })\r\n        } catch (e) {\r\n            throw new ElementException('CanvasPath', this.id, e.message)\r\n        }\r\n        if (this._isClosePath) {\r\n            this._context.closePath();\r\n        }\r\n        this.drawOptions();\r\n    }\r\n\r\n    getRect(): CanvasObjectCoordinates {\r\n        return {\r\n            x: -1,\r\n            y: -1,\r\n            width: 0,\r\n            height: 0\r\n        }\r\n    }\r\n}\r\n\r\n","import { mergeWithInherits, merge } from \"../../core/functions\";\r\nimport { CanvasObjectCoordinates, ICanvasDrawable, CanvasObjectSetup, IObjectProperties, CanvasPoint, CanvasObjectSize } from \"../../core/interfaces\";\r\nimport { CanvasObjectBase } from \"./base\";\r\n\r\n/**\r\n * Creates instance of rectangle drawable\r\n */\r\nexport class Rectangle extends CanvasObjectBase<CanvasObjectCoordinates> implements ICanvasDrawable {\r\n    constructor(setup: CanvasObjectSetup<CanvasRenderingContext2D, IObjectProperties>, init?: CanvasObjectCoordinates) {\r\n        super(setup, init ?? { x: -1, y: -1, width: -1, height: -1 }, 'rect');\r\n        this._settings.isFill = true;\r\n        if (!this._objectSetup)\r\n            this._objectSetup = {\r\n                x: 0, y: 0, height: 0, width: 0\r\n            }\r\n    }\r\n\r\n    setPosition(point: CanvasPoint) {\r\n        mergeWithInherits(this._objectSetup, point)\r\n    }\r\n\r\n    setSize(size: CanvasObjectSize) {\r\n        mergeWithInherits(this._objectSetup, size)\r\n    }\r\n\r\n    draw(): void {\r\n        this.setStyles();\r\n        if (this._settings.isFill)\r\n            this._context.fillRect(this._objectSetup.x, this._objectSetup.y, this._objectSetup.width, this._objectSetup.height);\r\n        if (this._settings.isStroke)\r\n            this._context.strokeRect(this._objectSetup.x, this._objectSetup.y, this._objectSetup.width, this._objectSetup.height);\r\n    }\r\n\r\n    getRect(): CanvasObjectCoordinates {\r\n        return {\r\n            ...this._objectSetup\r\n        }\r\n    }\r\n\r\n}","import { TextSetup, ICanvasDrawable, ISetter, CanvasObjectSetup, IObjectProperties, IStringable, CanvasObjectCoordinates } from \"../../core/interfaces\";\r\nimport { CanvasObjectBase } from \"./base\";\r\n\r\n/**\r\n * Creates instance of text that will be drawn on on canvas\r\n */\r\nexport class CanvasText extends CanvasObjectBase<TextSetup> implements ICanvasDrawable, ISetter<TextSetup> {\r\n    constructor(setup: CanvasObjectSetup<CanvasRenderingContext2D, IObjectProperties>, init?: TextSetup) {\r\n        super(setup, init ?? {}, 'text');\r\n        this._settings.isFill = true;\r\n        if (!this._objectSetup) {\r\n            this._objectSetup = {};\r\n        }\r\n    }\r\n\r\n    setFont(font: IStringable) {\r\n        this._settings.font = font;\r\n        return this;\r\n    }\r\n\r\n    isValid(): boolean {\r\n        if (!this._objectSetup) {\r\n            return false;\r\n        }\r\n        if (!this._objectSetup.text || this._objectSetup.text.length === 0) {\r\n            return false;\r\n        }\r\n        if (!this._objectSetup.position) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    draw(): void {\r\n        if (!this.isValid()) {\r\n            return;\r\n        }\r\n        this.setStyles();\r\n        if (this._settings.isFill) {\r\n            //@ts-ignore all objectSetup fields were checked in isValid\r\n            this._context.fillText(this._objectSetup.text, this._objectSetup.position.x, this._objectSetup.position.y);\r\n        }\r\n        if (this._settings.isStroke) {\r\n            //@ts-ignore all objectSetup fields were checked in isValid\r\n            this._context.strokeText(this._objectSetup.text, this._objectSetup.position.x, this._objectSetup.position.y);\r\n        }\r\n    }\r\n\r\n    getRect(): CanvasObjectCoordinates {\r\n\r\n        return {\r\n            x: 0,\r\n            y: 0,\r\n            width: 0,\r\n            height: 0\r\n        }\r\n    }\r\n}","import { CanvasLinearGradientColor, CanvasSourcePattern } from \"./colors\";\r\nimport { adjustSmallRange, notFalse, merge } from \"../core/functions\";\r\nimport { CanvasPoint, InitializationError, CanvasObjectCoordinates, IObjectProperties, CanvasObjectSize, TextSetup, AssistantOptions, CanvasImageSetup, CanvasObjectSetup, CanvasPatternDefinition, IObjectStyle } from \"../core/interfaces\";\r\nimport { getMapperDefinition } from \"./mapper\";\r\nimport { IMapper } from \"../core/mapper/interfaces\";\r\nimport { CanvasImage } from \"./components/image\";\r\nimport { CanvasPath } from \"./components/path\";\r\nimport { Rectangle } from \"./components/rectangle\";\r\nimport { CanvasText } from \"./components/text\";\r\n\r\nfunction getWholeCanvasCoords(canvas: HTMLCanvasElement): CanvasObjectCoordinates {\r\n    return { x: 0, y: 0, width: canvas.width, height: canvas.height }\r\n}\r\n\r\nfunction prepareCanvasObjectSetup<T, V, K>(context: T, settings: V, mapper: IMapper<V, T>, useGlobal: boolean, setup?: K, key?: string): CanvasObjectSetup<T, V> {\r\n    return {\r\n        context,\r\n        settings,\r\n        mapper,\r\n        useGlobal,\r\n        key\r\n    }\r\n}\r\n\r\n/**\r\n * Class wrapping up Canvas context\r\n */\r\nexport class CanvasAssistant {\r\n    private _canvas: HTMLCanvasElement;\r\n    private _context: CanvasRenderingContext2D;\r\n    private _settings: IObjectProperties;\r\n    private _mapper: IMapper<IObjectProperties, CanvasRenderingContext2D>;\r\n    private _useGlobalSettingsInComponents: boolean;\r\n    constructor(options: AssistantOptions) {\r\n        this._canvas = options.canvas;\r\n        const context = this._canvas.getContext('2d', {\r\n            alpha: options.alpha,\r\n            desynchronized: options.desynchronized\r\n        });\r\n        if (!context) {\r\n            throw new InitializationError(\"Context was not initialized\")\r\n        }\r\n        this._settings = options.settings ?? {}\r\n        this._useGlobalSettingsInComponents = notFalse(options.useGlobalSettings);\r\n        this._mapper = getMapperDefinition();\r\n\r\n        this._context = context\r\n        if (options.size) {\r\n            this.setCanvasSize(options.size)\r\n        }\r\n    }\r\n\r\n    getSetupForComponent(): CanvasObjectSetup<CanvasRenderingContext2D, IObjectProperties> {\r\n        return prepareCanvasObjectSetup(this._context, this._settings, this._mapper, this._useGlobalSettingsInComponents)\r\n    }\r\n\r\n    createPath(startingPoint?: CanvasPoint) {\r\n        return new CanvasPath(this.getSetupForComponent(), startingPoint);\r\n    }\r\n\r\n    createRectangle(coordinates?: CanvasObjectCoordinates) {\r\n        return new Rectangle(this.getSetupForComponent(), coordinates);\r\n    }\r\n\r\n    createText(setup?: TextSetup) {\r\n        return new CanvasText(this.getSetupForComponent(), setup);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param setup \r\n     * @returns \r\n     */\r\n    createImage(setup?: CanvasImageSetup): CanvasImage {\r\n        return new CanvasImage(this.getSetupForComponent(), setup)\r\n    }\r\n\r\n    /**\r\n     * Sets global canvas object properties\r\n     * @param settings \r\n     */\r\n    setGlobalObjectProperties(settings: IObjectProperties) {\r\n        this._settings = merge(this._settings, settings);\r\n    }\r\n\r\n    /**\r\n     * Retrives global object properties\r\n     * @returns object properties\r\n     */\r\n    getGlobalObjectProperties(): IObjectProperties {\r\n        return this._settings;\r\n    }\r\n\r\n    /**\r\n     * Sets global alpha on context\r\n     * @param value alpha value in range 0..1 or 0...100\r\n     */\r\n    setGlobalAlpha(value: number) {\r\n        this._context.globalAlpha = adjustSmallRange(value);\r\n    }\r\n\r\n    /**\r\n     * Sets image smoothing options\r\n     * @param enabled - sets whether smoothing is enabled\r\n     * @param quality - {optional} - set smoothing quality (high, medium, low) - works only when enabled is true\r\n     */\r\n    setImageSmoothing(enabled: boolean, quality?: ImageSmoothingQuality) {\r\n        this._context.imageSmoothingEnabled = enabled;\r\n        if (quality && enabled)\r\n            this._context.imageSmoothingQuality = quality;\r\n    }\r\n\r\n    /**\r\n     * Invokes orginial getImageData\r\n     * @param coords data size and position\r\n     * @returns ImageData\r\n     */\r\n    getImageData(coords: CanvasObjectCoordinates) {\r\n        return this._context.getImageData(coords.x, coords.y, coords.width, coords.height);\r\n    }\r\n\r\n\r\n    /**\r\n     * Invokes original method putImageData with params.\r\n     * \r\n     * @param imageData - ImageData - data to put\r\n     * @param position - CanvasPoint - position where data shall be put to\r\n     * @param cutCoords - optional - coordinates of ImageData slice \r\n     */\r\n    putImageData(imageData: ImageData, position: CanvasPoint, cutCoords?: CanvasObjectCoordinates) {\r\n        if (cutCoords) {\r\n            this._context.putImageData(imageData, position.x, position.y, cutCoords.x, cutCoords.y, cutCoords.width, cutCoords.height)\r\n            return;\r\n        }\r\n        this._context.putImageData(imageData, position.x, position.y);\r\n    }\r\n\r\n    /**\r\n     * Calls original [ctx.createImageData] with size\r\n     * @param size object size\r\n     */\r\n    createImageData(width: number | ImageData, height?: number) {\r\n        if (typeof width === 'number') {\r\n            this._context.createImageData(width, height ?? 0);\r\n            return;\r\n        }\r\n        this._context.createImageData(width);\r\n    }\r\n\r\n    /**\r\n     * Saves context settings\r\n     */\r\n    save() {\r\n        this._context.save();\r\n    }\r\n\r\n    /**\r\n     * Restores previously saved context settings\r\n     */\r\n    restore() {\r\n        this._context.restore();\r\n    }\r\n\r\n    setCanvasSize(size: CanvasObjectSize) {\r\n        this._canvas.width = size.width;\r\n        this._canvas.height = size.height;\r\n    }\r\n\r\n    getCanvasSize(): CanvasObjectSize {\r\n        return {\r\n            width: this._canvas.width,\r\n            height: this._canvas.height\r\n        }\r\n    }\r\n\r\n    getContext(): CanvasRenderingContext2D {\r\n        return this._context;\r\n    }\r\n\r\n    createLinearGradient(options?: CanvasObjectCoordinates): CanvasLinearGradientColor {\r\n        return new CanvasLinearGradientColor(this._context, options);\r\n    }\r\n\r\n    createPattern(options?: CanvasPatternDefinition): CanvasSourcePattern {\r\n        return new CanvasSourcePattern(this._context, options);\r\n    }\r\n\r\n    clear(coords?: CanvasObjectCoordinates) {\r\n        let co = coords ?? getWholeCanvasCoords(this._canvas)\r\n        this._context.clearRect(co.x, co.y, co.width, co.height);\r\n    }\r\n}","import { IObjectProperties } from \"../core/interfaces\";\r\nimport { MapSetter } from \"../core/mapper/interfaces\";\r\nimport { Mapper } from \"../core/mapper/mapper\";\r\nimport { styleSetter, numberSetter, stringableSetter, enumSetter } from \"../core/mapper/setters\";\r\n\r\nexport function lineDashSetter(): MapSetter<CanvasRenderingContext2D> {\r\n    return {\r\n        set(destination: CanvasRenderingContext2D, key: string, value: any) {\r\n            if (Array.isArray(value)) {\r\n                destination.setLineDash(value);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function getMapperDefinition(): Mapper<IObjectProperties, CanvasRenderingContext2D> {\r\n    return new Mapper([\r\n        { key: \"strokeStyle\", setter: styleSetter() },\r\n        { key: \"fillStyle\", setter: styleSetter() },\r\n        { key: \"strokeWidth\", mapTo: 'lineWidth', setter: numberSetter('float') },\r\n        { key: \"font\", setter: stringableSetter() },\r\n        { key: \"mitterLimit\", setter: numberSetter('integer') },\r\n        { key: \"lineCap\", setter: enumSetter([\"butt\", \"round\", \"square\"], 'square') },\r\n        { key: \"lineJoin\", setter: enumSetter([\"bevel\", \"round\", \"miter\"], 'miter') },\r\n        { key: \"lineDashOffset\", setter: numberSetter('integer') },\r\n        { key: \"lineDash\", setter: lineDashSetter() },\r\n        { key: \"textAlign\", setter: enumSetter([\"left\", \"right\", \"center\", \"start\", \"end\"], 'right') },\r\n        { key: \"textBaseline\", setter: enumSetter([\"top\", \"hanging\", \"middle\", \"bottom\", \"alphabetic\", \"ideographic\"], 'alphabetic') },\r\n        { key: \"shadowColor\", setter: styleSetter() },\r\n        { key: \"shadowOffsetX\", setter: numberSetter('float') },\r\n        { key: \"shadowOffsetY\", setter: numberSetter('float') },\r\n        { key: \"shadowBlur\", setter: numberSetter('float') },\r\n    ]);\r\n}","import { merge, validator } from \"../core/functions\";\r\nimport { ArcOptions, BezierCurveOptions, CanvasPoint, CurveOptions, ElementException, EllipseOptions, IGetter, IIdentifyable, IKey, IPathElement, ISetter, PathElementOptions, QuadraticCurveOptions } from \"../core/interfaces\";\r\nimport { angle360, createKey, } from \"./statics\";\r\n\r\n\r\nfunction parseOptions<T>(input: PathElementOptions<T> | T | string | undefined): PathElementOptions<T> {\r\n    if (!input) {\r\n        return {\r\n            key: undefined,\r\n            init: undefined\r\n        }\r\n    }\r\n    if (typeof input === 'string') {\r\n        return {\r\n            key: input,\r\n            init: undefined\r\n        }\r\n    }\r\n    if ((<any>input)['init']) {\r\n        return {\r\n            init: (<any>input)['init'],\r\n            key: (<any>input)['key']\r\n        }\r\n    }\r\n    return {\r\n        key: undefined,\r\n        init: <any>input\r\n    }\r\n}\r\n\r\nclass PathElementBase<T> implements IIdentifyable, IKey<string>, ISetter<T> {\r\n    id: string;\r\n    name: string;\r\n    data: T;\r\n    constructor(name: string, counter: string, init: T, key?: string) {\r\n        this.id = key ?? createKey(counter);\r\n        this.name = name;\r\n        this.data = init;\r\n    }\r\n\r\n    /**\r\n     * Retrvies an id of the path element\r\n     * @returns key of the element \r\n     */\r\n    getKey(): string {\r\n        return this.id;\r\n    }\r\n\r\n    /**\r\n     * Sets setup data of the element\r\n     * @param data \r\n     * @returns \r\n     */\r\n    set(data: T) {\r\n        this.data = merge(this.data, data);\r\n        return this;\r\n    }\r\n\r\n    throw(message: string) {\r\n        throw new ElementException(this.name, this.id, message)\r\n    }\r\n\r\n    validateKeys(keys: (keyof T)[]): boolean {\r\n        return validator(this.data, keys, (objectName: string, objectType: string, value: any) => {\r\n            if (objectType === 'undefined') {\r\n                this.throw(`[${objectName}] not defined`);\r\n            }\r\n            if (objectType === 'number' && value < 0) {\r\n                this.throw(`[${objectName}] is not correct`);\r\n            }\r\n            return true;\r\n        })\r\n    }\r\n}\r\n\r\nclass DataBase<T> implements IGetter<T> {\r\n    protected _data: T;\r\n    constructor(init: T) {\r\n        this._data = init;\r\n    }\r\n\r\n    get(): T {\r\n        return this._data;\r\n    }\r\n}\r\n\r\nexport class LineData extends DataBase<CanvasPoint[]>  {\r\n    constructor(...points: CanvasPoint[]) {\r\n        super([...points])\r\n    }\r\n\r\n    to(...points: CanvasPoint[]) {\r\n        this._data.push(...points);\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class Line extends PathElementBase<CanvasPoint[]> implements IPathElement {\r\n    constructor(options: PathElementOptions<CanvasPoint[]> | CanvasPoint[] | string | undefined) {\r\n        const { init, key } = parseOptions(options)\r\n        super(\"Line\", 'line', init ?? [], key);\r\n    }\r\n\r\n    set(data: CanvasPoint[]) {\r\n        this.data = [...data];\r\n        return this;\r\n    }\r\n\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint {\r\n        if (this.data.length === 0) {\r\n            this.throw(\"There are no lines to draw\");\r\n        }\r\n        let last = this.data[0];\r\n        this.data.forEach(point => {\r\n            context.lineTo(point.x, point.y)\r\n            last = point;\r\n        })\r\n\r\n        return {\r\n            ...last\r\n        }\r\n    }\r\n}\r\n\r\nexport class CurveData extends DataBase<CurveOptions> {\r\n    constructor(data?: CurveOptions) {\r\n        super(data ?? {});\r\n    }\r\n\r\n    to(point: CanvasPoint) {\r\n        this._data.end = point;\r\n        return this;\r\n    }\r\n\r\n    corner(point: CanvasPoint) {\r\n        this._data.corner = point;\r\n        return this;\r\n    }\r\n\r\n    withRadius(value: number) {\r\n        this._data.radius = value;\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Creates curved line\r\n */\r\nexport class Curve extends PathElementBase<CurveOptions> implements IPathElement {\r\n    constructor(options: PathElementOptions<CurveOptions> | CurveOptions | string | undefined) {\r\n        const { init, key } = parseOptions<CurveOptions>(options);\r\n        super(\"Curve\", 'curve', init ?? {}, key)\r\n    }\r\n\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint {\r\n        if (this.validateKeys(['corner', 'end', 'radius'])) {\r\n            //@ts-ignore end must be defined\r\n            context.arcTo(this.data.corner.x, this.data.corner.y, this.data.end.x, this.data.end.y, this.data.radius);\r\n            //@ts-ignore end must be defined\r\n            context.lineTo(this.data.end.x, this.data.end.y)\r\n        }\r\n        //@ts-ignore end must be defined\r\n        return {\r\n            ...this.data.end\r\n        }\r\n    }\r\n}\r\n\r\nexport class ArcData extends DataBase<ArcOptions> {\r\n    constructor(data?: ArcOptions) {\r\n        super(data ?? {\r\n            startAngle: -1,\r\n            endAngle: -1,\r\n            radius: -1\r\n        })\r\n    }\r\n\r\n    setStartAngle(value: number) {\r\n        this._data.startAngle = value;\r\n        return this;\r\n    }\r\n\r\n    setEndAngle(value: number) {\r\n        this._data.endAngle = value;\r\n        return this;\r\n    }\r\n\r\n    setRadius(value: number) {\r\n        this._data.radius = value;\r\n        return this;\r\n    }\r\n\r\n}\r\n\r\n\r\nexport class Arc extends PathElementBase<ArcOptions> implements IPathElement {\r\n    constructor(settings: PathElementOptions<ArcOptions> | ArcOptions | string | undefined) {\r\n        const { init, key } = parseOptions(settings)\r\n        super(\"Arc\", 'curve', init ?? {\r\n            startAngle: -1,\r\n            endAngle: -1,\r\n            radius: -1\r\n        }, key);\r\n\r\n    }\r\n\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint {\r\n        if (this.validateKeys(['endAngle', 'startAngle', 'radius'])) {\r\n            context.arc(from.x, from.y, this.data.radius, this.data.startAngle, this.data.endAngle);\r\n        }\r\n\r\n        return {\r\n            ...from\r\n        }\r\n    }\r\n}\r\n\r\nexport class BezierCurveData extends DataBase<BezierCurveOptions> {\r\n    constructor(init?: BezierCurveOptions) {\r\n        super(init ?? {})\r\n    }\r\n\r\n    to(point: CanvasPoint) {\r\n        this._data.end = point;\r\n        return this;\r\n    }\r\n\r\n    by(point1: CanvasPoint, point2: CanvasPoint) {\r\n        this._data.controlPoint = point1;\r\n        this._data.controlPoint2 = point2;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class BezierCurve extends PathElementBase<BezierCurveOptions> implements IPathElement {\r\n    constructor(options: PathElementOptions<BezierCurveOptions> | BezierCurveOptions | string | undefined) {\r\n        const { init, key } = parseOptions(options)\r\n        super(\"BezierCurve\", 'curve', init ?? {}, key);\r\n    }\r\n\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint {\r\n        if (this.validateKeys(['controlPoint2', 'controlPoint', 'end'])) {\r\n            //@ts-ignore end must be defined\r\n            context.bezierCurveTo(this.data.controlPoint.x, this.data.controlPoint.y, this.data.controlPoint2.x, this.data.controlPoint2.y, this.data.end.x, this.data.end.y);\r\n        }\r\n\r\n\r\n        //@ts-ignore end must be defined\r\n        return {\r\n            ...this.data.end\r\n        }\r\n    }\r\n}\r\n\r\nexport class QuadraticCurveData extends DataBase<QuadraticCurveOptions> {\r\n    constructor(init?: QuadraticCurveOptions) {\r\n        super(init ?? {})\r\n    }\r\n\r\n    to(point: CanvasPoint) {\r\n        this._data.end = point;\r\n        return this;\r\n    }\r\n\r\n    by(point: CanvasPoint) {\r\n        this._data.controlPoint = point;\r\n        return this;\r\n    }\r\n}\r\n\r\nexport class QuadraticCurve extends PathElementBase<QuadraticCurveOptions> implements IPathElement {\r\n    constructor(options: PathElementOptions<QuadraticCurveOptions> | QuadraticCurveOptions | string | undefined) {\r\n        const { init, key } = parseOptions(options)\r\n        super(\"QuadraticCurve\", 'curve', init ?? {}, key);\r\n    }\r\n\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint {\r\n        if (this.validateKeys(['controlPoint', 'end'])) {\r\n            //@ts-ignore end must be defined\r\n            context.quadraticCurveTo(this.data.controlPoint.x, this.data.controlPoint.y, this.data.end.x, this.data.end.y);\r\n        }\r\n\r\n        //@ts-ignore end must be defined\r\n        return {\r\n            ...this.data.end\r\n        }\r\n    }\r\n}\r\n\r\nexport class EllipseData extends DataBase<EllipseOptions> {\r\n    constructor(init?: EllipseOptions) {\r\n        super(init ?? {\r\n            rotation: 0,\r\n            startAngle: 0,\r\n            endAngle: angle360\r\n        });\r\n    }\r\n\r\n    setRadius(x: number, y?: number) {\r\n        this._data.radiusX = x;\r\n        this._data.radiusY = y ?? x;\r\n        return this;\r\n\r\n    }\r\n\r\n    setAngles(start: number, end: number) {\r\n        this._data.startAngle = start;\r\n        this._data.endAngle = end;\r\n        return this;\r\n    }\r\n\r\n    setRotation(rotation: number) {\r\n        this._data.rotation = rotation\r\n        return this;\r\n    }\r\n}\r\n\r\n\r\nexport class Ellipse extends PathElementBase<EllipseOptions> implements IPathElement {\r\n    constructor(options: PathElementOptions<EllipseOptions> | EllipseOptions | string | undefined) {\r\n        const { init, key } = parseOptions(options)\r\n        super(\"Ellipse\", 'ellipse', init ?? {}, key);\r\n    }\r\n\r\n    build(context: CanvasRenderingContext2D, from: CanvasPoint): CanvasPoint {\r\n        if (this.validateKeys(['startAngle', 'endAngle', \"radiusX\", 'radiusY', 'rotation'])) {\r\n            //@ts-ignore props must be defined\r\n            context.ellipse(from.x, from.y, this.data.radiusX, this.data.radiusY, this.data.rotation, this.data.startAngle, this.data.endAngle);\r\n        }\r\n        return {\r\n            ...from\r\n        }\r\n    }\r\n}\r\n","import { merge } from \"../core/functions\";\r\nimport { IGetter, IObjectProperties, IObjectStyle, IStringable, LineCap, LineJoin, TextAlign, TextBaseline } from \"../core/interfaces\";\r\n\r\nexport interface IObjectPropertiesHelper {\r\n    set(properties: IObjectProperties): IObjectPropertiesHelper;\r\n    setFillStyle(color: IObjectStyle): IObjectPropertiesHelper;\r\n    setStrokeStyle(color: IObjectStyle): IObjectPropertiesHelper;\r\n    setShadowColor(color: IObjectStyle): IObjectPropertiesHelper;\r\n    setShadow(color: IObjectStyle, offsetX: number, offsetY: number, blur?: number): IObjectPropertiesHelper;\r\n    setFont(font: IStringable): IObjectPropertiesHelper;\r\n    setText(font: IStringable, textAlign: TextAlign, textBaseline: TextBaseline): IObjectPropertiesHelper;\r\n    setStrokeWidth(value: number): IObjectPropertiesHelper;\r\n    setStroke(width?: number, lineJoin?: LineJoin, lineCap?: LineCap, lineDash?: number[], dashOffset?: number, mitterLimit?: number): IObjectPropertiesHelper;\r\n    setStrokeDash(dash: number[], offset?: number): IObjectPropertiesHelper;\r\n    setStrokeDetails(lineJoin: LineJoin, lineCap: LineCap, mitterLimit?: number): IObjectPropertiesHelper;\r\n}\r\n\r\nexport class ObjectProperties implements IObjectPropertiesHelper, IGetter<IObjectProperties> {\r\n    private _instance: IObjectProperties;\r\n    constructor(properties?: IObjectProperties) {\r\n        this._instance = {};\r\n        if (properties) {\r\n            this.set(properties);\r\n        }\r\n    }\r\n\r\n    set(properties: IObjectProperties) {\r\n        this._instance = merge(this._instance, properties);\r\n        return this;\r\n    }\r\n\r\n    setFillStyle(style: IObjectStyle) {\r\n        this._instance.fillStyle = style;\r\n        return this;\r\n    }\r\n\r\n    setStrokeStyle(style: IObjectStyle) {\r\n        this._instance.strokeStyle = style;\r\n        return this;\r\n    }\r\n\r\n    setShadowColor(color: IObjectStyle) {\r\n        this._instance.shadowColor = color\r\n        return this;\r\n    }\r\n\r\n    setShadow(color: IObjectStyle, offsetX: number, offsetY: number, blur?: number) {\r\n        return this.set({\r\n            shadowColor: color,\r\n            shadowOffsetX: offsetX,\r\n            shadowOffsetY: offsetY,\r\n            shadowBlur: blur\r\n        })\r\n    }\r\n\r\n    setFont(font: IStringable) {\r\n        this._instance.font = font\r\n        return this;\r\n    }\r\n\r\n    setText(font: IStringable, textAlign: TextAlign, textBaseline: TextBaseline) {\r\n        return this.set({\r\n            font,\r\n            textAlign,\r\n            textBaseline\r\n        });\r\n    }\r\n\r\n    setStrokeWidth(value: number) {\r\n        this._instance.strokeWidth = value;\r\n        return this;\r\n    }\r\n\r\n    setStroke(width?: number, lineJoin?: LineJoin, lineCap?: LineCap, lineDash?: number[], dashOffset?: number, mitterLimit?: number) {\r\n        return this.set({\r\n            strokeWidth: width,\r\n            lineDashOffset: dashOffset,\r\n            lineJoin,\r\n            lineCap,\r\n            lineDash,\r\n\r\n        })\r\n    }\r\n\r\n    setStrokeDash(dash: number[], offset?: number) {\r\n        this._instance.lineDash = dash;\r\n        if (offset)\r\n            this._instance.lineDashOffset = offset;\r\n        return this;\r\n    }\r\n\r\n    setStrokeDetails(lineJoin: LineJoin, lineCap: LineCap, mitterLimit?: number) {\r\n        return this.set({\r\n            lineJoin,\r\n            lineCap,\r\n            mitterLimit\r\n        });\r\n    }\r\n\r\n    get(): IObjectProperties {\r\n        return this._instance;\r\n    }\r\n}","import { merge } from \"./functions\";\r\nimport { ISetter, IStringable } from \"./interfaces\";\r\n\r\nexport interface FontSetup {\r\n    style?: 'italic' | \"normal\";\r\n    size?: number;\r\n    unit?: string;\r\n    type?: string;\r\n}\r\n\r\nexport class Font implements IStringable, ISetter<FontSetup> {\r\n    private _setup: FontSetup;\r\n    constructor(setup?: FontSetup) {\r\n        this._setup = {\r\n            unit: 'px'\r\n        };\r\n        if (setup) {\r\n            this.set(setup)\r\n        }\r\n    }\r\n\r\n    set(setup: FontSetup): Font {\r\n        this._setup = merge(this._setup, setup);\r\n        return this;\r\n    }\r\n\r\n    setType(type: string) {\r\n        this._setup.type = type;\r\n        return this;\r\n    }\r\n\r\n    setSize(value: number) {\r\n        this._setup.size = value;\r\n        return this;\r\n    }\r\n\r\n    setUnit(value: string) {\r\n        this._setup.unit = value;\r\n        return this;\r\n    }\r\n\r\n    setStyle(style: 'normal' | 'italic') {\r\n        this._setup.style = style;\r\n        return this;\r\n    }\r\n\r\n    asString(): string {\r\n        let result = [];\r\n        if (this._setup.style) {\r\n            result.push(this._setup.style)\r\n        }\r\n        if (this._setup.size) {\r\n            result.push((this._setup.size + (this._setup.unit ?? '')))\r\n        }\r\n        if (this._setup.type) {\r\n            result.push(this._setup.type)\r\n        }\r\n\r\n        return result.join(' ');\r\n    }\r\n\r\n}"],"sourceRoot":""}